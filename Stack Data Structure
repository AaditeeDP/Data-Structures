The data structure part 1:
STACK
 
#include <stdio.h> 
#include <stdlib.h> 
#define MAX 25

int st[MAX], top=-1; 
void push(int st[], int val); 
int pop(int st[]); 
int peek(int st[]); 
void display(int st[]); 

void main()  
    { 
    int val, option; 
    do 
    { 
        printf("Sign menu\n"); 
        printf("case 1-push \n"); 
        printf("case 2-pop \n"); 
        printf("case 3-peek \n"); 
        printf("case 4-display \n"); 
        printf("case 5-exit \n"); 
        printf("Enter the operation you want to perform: \n"); 
        scanf("%d", &option); 
    
        switch(option) 
        { 
            case 1: 
            printf("Enter the number to be pushed on stack:\n"); 
            scanf("%d", &val); 
            push(st, val); 
            break; 
            case 2: 
            val = pop(st); 
            if(val != -1) 
            printf("The value deleted from stack is: %d \n", val); 
            break; 
            case 3: 
            val = peek(st); 
            if(val != -1) 
            printf("The value stored at top of stack is: %d \n", val); 
            break; 
            case 4: 
            display(st); 
            break; 
        } 
        
        }while(option != 5); 
        return 0; 
} 

void push(int st[], int val) 
{ 
    if(top == MAX-1) 
    { 
    printf("stack overflow \n"); 
    } 
    else 
    { 
    top++; 
    st[top] = val; 
    } 
} 

int pop(int st[]) 
{ 
    int val; 
    if(top == -1) 
        { 
            printf(" stack underflow \n"); 
            return -1; 
        } 
        else 
        { 
            val = st[top]; 
            top--; 
            return val; 
        } 
} 

void display(int st[]) 
{ 
    int i; 
    if(top == -1) 
        printf("empty stack \n");
    else 
    { 
        for(i=top;i>=0;i--) 
        printf("\n %d",st[i]); 
        printf("\n");
    }
} 
int peek(int st[]) 
{ 
    if(top == -1) 
    { 
        printf("stack is empty \n"); 
        return -1; 
    } 
    else 
    return (st[top]); 
}  
 
