Queue Data structure

Implementation of Queue using array:

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#define MAX 50

int rear = -1;
int front = -1;
int queue[MAX];

void enqueue()
{
    int value;
    if(rear == MAX - 1)
    {
        printf("QUEUE OVERFLOW \n");
    }
    else
    {
        if(front == -1)
        {
            front = 0;
        }
        printf("Enter the number to be inserted\n");
        scanf("%d",&value);
        rear++;
        queue[rear] = value;
    }
}

int dequeue()
{
    if(front > rear || front == -1)
    {
        printf("UNDERFLOW CONDITION\n");
    }
    else
    {
        printf("The that number has been deleted is  %d \n ", queue[front]);
        int value = queue[front];
        if(front > rear )
        {
           front = rear = -1; 
        }
        front++;
        return value;
    }
}

void display()
{
    int i;
    if(front == -1)
    {
        printf("EMPTY QUEUE\n");
        
    }
    else
    {
        printf("the numbers stored in the queue are : \n");
        for(i=0;i<=rear;i++)
        {
            printf("%d\t",queue[i]);
        }
        printf("\n");
    }
}

void main()
{
    int option;
    int j;
    printf("--------------------QUEUE IMPLEMENTATION--------------------\n ");
    do
    {
        printf("Operation that you can perform using this program: \n");
        printf("1. Enqueue \n");
        printf("2. Dequeue \n");
        printf("3. Display \n");
        printf("4. Exit \n");
        printf("Enter the option number you want to execute\n");
        scanf("%d",&option);
        switch(option)
        {
            case 1:
            enqueue();
            break;
            
            case 2:
            dequeue();
            break;
            
            case 3:
            display();
            break;
            
            case 4:
            exit(0);
            
            default:
            printf("operation cannot be performed\n");
            
        }
    }while(option != 4);
}
